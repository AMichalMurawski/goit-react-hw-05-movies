{"version":3,"file":"static/js/597.4d10eb37.chunk.js","mappings":"wQAUA,EAVqB,SAAC,GAAoC,EAAnCA,GAAoC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SACxC,OACI,0BACkB,OAAbA,GAAqB,gBAAKC,IAAKD,EAAUE,IAAG,gBAAWJ,MAAc,yCAAiBA,MACvF,uBAAIA,KACJ,uCAAeC,OAG1B,ECgCD,EAnCiB,WACb,IAAQF,GAAOM,EAAAA,EAAAA,MAAPN,GACR,GAA4BO,EAAAA,EAAAA,eAASC,GAArC,eAAOC,EAAP,KAAeC,EAAf,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAW,mCAAG,qGACGC,EAAAA,EAAAA,IAAeb,GADlB,cACVc,EADU,yBAETA,GAFS,2CAAH,qDAIjBF,IACKG,MAAK,SAAAC,GACFN,GAAU,OAAIM,GACjB,IACAC,OAAM,SAAAC,GAEHR,EAAU,GACb,GACR,GAAE,CAACV,KAGA,8BACKS,GACM,wBACEA,EAAOU,KAAI,SAAAC,GACR,IAAQpB,EAAkCoB,EAAlCpB,GAAIG,EAA8BiB,EAA9BjB,SAAUF,EAAoBmB,EAApBnB,KAAMC,EAAckB,EAAdlB,UAC5B,OAAQ,SAAC,EAAD,CAAuBC,SAAUA,EAAUF,KAAMA,EAAMC,UAAWA,GAA/CF,EAC9B,WAGQQ,IAAXC,GAAwB,8CAA+B,qEAIxE,C,wMCjCKY,EAAkB,SAACC,EAAWC,GAChC,OAAOC,EAAAA,EAAAA,IAJY,+BAIeF,EAAW,CACzCG,QAAO,QACHC,QALW,mCAMXC,SAAU,SACPJ,KAGNR,MAAK,SAAAa,GACF,OAAIA,EAASC,OACFD,CAGd,IACAb,MAAK,SAAAa,GACF,OAAOA,CACV,GACR,EAEKE,EAAsB,mCAAG,8FACT,sBACZP,EAAa,CAAC,EAFO,SAGJF,EAFL,sBAEgCE,GAHvB,cAGrBK,EAHqB,OAIvBG,EAAa,GACjBH,EAASd,KAAKkB,QAAQC,SAAQ,SAAAC,GAC9B,OAAOH,EAAWI,KAAK,CAACnC,GAAGkC,EAAMlC,GAAIoC,MAAMF,EAAME,OAChD,IAP0B,kBAQpBL,GARoB,2CAAH,qDAWtBM,EAAiB,mCAAG,WAAOC,GAAP,iFACJ,gBACZf,EAAa,CACfgB,MAAOD,EACPE,KAAM,GAJY,SAMCnB,EALL,gBAKgCE,GAN5B,cAMhBK,EANgB,OAOlBG,EAAa,GACjBH,EAASd,KAAKkB,QAAQC,SAAQ,SAAAC,GAC1B,IAAQlC,EAAckC,EAAdlC,GAAIoC,EAAUF,EAAVE,MACZ,OAAOL,EAAWI,KAAK,CAACnC,GAAAA,EAAIoC,MAAAA,GAC/B,IAXqB,kBAYfL,GAZe,2CAAH,sDAejBU,EAAiB,mCAAG,WAAOzC,GAAP,gGAChBsB,EADgB,iBACMtB,GACtBuB,EAAa,CAAC,EAFE,SAGCF,EAAgBC,EAAWC,GAH5B,cAGhBK,EAHgB,SAIuCA,EAASd,KAA9D4B,EAJc,EAIdA,YAAaN,EAJC,EAIDA,MAAOO,EAJN,EAIMA,aAAcC,EAJpB,EAIoBA,SAAUC,EAJ9B,EAI8BA,OAC9CX,EAAQ,CACV9B,IAAK,kCAAoCsC,EACzCN,MAAAA,EACAO,aAAAA,EACAC,SAAAA,EACAC,OAAAA,GAVkB,kBAYfX,GAZe,2CAAH,sDAejBrB,EAAc,mCAAG,WAAOb,GAAP,oFACbsB,EADa,iBACStB,EADT,YAEbuB,EAAa,CAAC,EAFD,SAGIF,EAAgBC,EAAWC,GAH/B,cAGbK,EAHa,OAIfnB,EAAS,GACbmB,EAASd,KAAKgC,KAAKb,SAAQ,SAAAb,GACvB,IAAQpB,EAAsCoB,EAAtCpB,GAAI+C,EAAkC3B,EAAlC2B,aAAc9C,EAAoBmB,EAApBnB,KAAMC,EAAckB,EAAdlB,UAChC,OAAOO,EAAO0B,KAAK,CACfnC,GAAAA,EACAG,SAA2B,OAAjB4C,EAAwB,kCAAkCA,EAAe,KACnF9C,KAAAA,EACAC,UAAAA,GAEP,IAbkB,kBAcZO,GAdY,2CAAH,sDAiBduC,EAAiB,mCAAG,WAAOhD,GAAP,oFAChBsB,EADgB,iBACMtB,EADN,YAEhBuB,EAAa,CAAC,EAFE,SAGCF,EAAgBC,EAAWC,GAH5B,cAGhBK,EAHgB,OAIlBqB,EAAU,GACdrB,EAASd,KAAKkB,QAAQC,SAAQ,SAAAiB,GAC1B,IAAQlD,EAAwBkD,EAAxBlD,GAAImD,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QACpB,OAAOH,EAAQd,KAAK,CAAEnC,GAAAA,EAAImD,OAAAA,EAAQC,QAAAA,GACrC,IARqB,kBASfH,GATe,2CAAH,qD","sources":["components/CastListItem.jsx","components/CastList.jsx","js/fetch-the-movie-db.js"],"sourcesContent":["const CastListItem = ({id, name, character, srcImage}) => {\n    return (\n        <li>\n            {srcImage !== null ? (<img src={srcImage} alt={`actor ${name}`} />) : <p>No image for {name}</p> }\n            <p>{name}</p>\n            <p>Character: {character}</p>\n        </li>\n    )\n}\n\nexport default CastListItem","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport {fetchMovieCast} from '../js/fetch-the-movie-db.js'\nimport CastListItem from './CastListItem.jsx';\n\nconst CastList = () => {\n    const { id } = useParams();\n    const [actors, setActors] = useState(undefined);\n\n    useEffect(() => {\n        const fetchActors = async () => {\n            const data = await fetchMovieCast(id)\n            return data\n        }\n        fetchActors()\n            .then(newActors => {\n                setActors([...newActors])\n            })\n            .catch(error => {\n                // console.log(\"Error fetch list of trending movies\", error)\n                setActors([])\n            })\n    }, [id])\n\n    return (\n        <>\n            {actors\n                ? (<ul>\n                    {actors.map(actor => {\n                        const { id, srcImage, name, character } = actor;\n                        return (<CastListItem key={id} srcImage={srcImage} name={name} character={character} />);\n                    })\n                    }\n                </ul>)\n                : actors === undefined ? (<div>Loading cast...</div>) : (<div>We don't have any casts for this movie</div>)\n            }\n        </>\n    )    \n}\n\nexport default CastList\n","import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            if (response.status === 404) {\n                return response\n            }\n            return response\n        })\n        .then(response => {\n            return response\n        })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    const { poster_path, title, vote_average, overview, genres }=response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}"],"names":["id","name","character","srcImage","src","alt","useParams","useState","undefined","actors","setActors","useEffect","fetchActors","fetchMovieCast","data","then","newActors","catch","error","map","actor","fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","response","status","fetchMoviesTrendingDay","moviesList","results","forEach","movie","push","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","cast","profile_path","fetchMovieReviews","reviews","review","author","content"],"sourceRoot":""}