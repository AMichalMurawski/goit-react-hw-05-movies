{"version":3,"file":"static/js/470.ffb61196.chunk.js","mappings":"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","sources":["api/fetchTheMovies.js","components/MovieList.styled.js","components/MoviesList.jsx","components/MoviesListItem.styled.js","components/MoviesListItem.jsx","components/SearchBar.styled.js","components/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            return null\n    })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    const { poster_path, title, vote_average, overview, genres, release_date } = response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n        year: `${new Date(release_date).getFullYear()}`,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}","import styled from 'styled-components';\n\nexport const H2 = styled.h2`\n    font-size:30px;\n`\n\nexport const Ul = styled.ul`\n    display:flex;\n    flex-direction:column;\n    gap:10px;\n    margin:0;\n    padding:10px;\n    padding-left:20px;\n`","import { H2, Ul } from './MovieList.styled';\n\nconst MoviesList = ({ title, children }) => {\n    return (\n        <div>\n            <H2>{title}</H2>\n            <Ul>\n                {children}\n            </Ul>\n        </div>\n    )\n}\n\nexport default MoviesList","import styled from 'styled-components';\n\nexport const Li = styled.li`\n    display:flex;\n    flex-direction:row;\n    align-items:center;\n    gap:10px;\n    margin:0;\n    padding:0;\n`\n\nexport const Number = styled.p`\n    width:25px;\n    height:25px;\n    border: 1px solid black;\n    border-radius:50%;\n    display:flex;\n    justify-content:center;\n    align-items:center;\n    margin:0;\n    padding:0;\n`;","import { Link } from './SharedLayout.styled';\nimport { Li, Number } from './MoviesListItem.styled';\n\nconst MoviesListItem = ({ linkTo, movieName, fromLocation, number }) => {\n    return (\n        <Li><Number>{number}</Number><Link to={`${linkTo}`} state={{from:fromLocation}}>{movieName}</Link></Li>\n    )\n}\n\nexport default MoviesListItem","import styled from 'styled-components';\n\nconst fontStyled = [\n    \"padding: 10px\",\n    \"font-weight: 400\",\n    \"font-size: 16px\",\n]\n\nexport const Input = styled.input`\n    ${fontStyled.map(value => value).join(\"; \")};\n    width: 400px;\n\n`\n\nexport const Button = styled.button`\n    ${fontStyled.map(value => value).join(\"; \")}\n`\n\n","import React, { useState } from \"react\";\nimport { Input, Button } from './SearchBar.styled';\n\nconst SearchBar = ({ searchMovies }) => {\n    const [filter, setFilter] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        searchMovies(filter);\n        setFilter(\"\");\n    };\n\n    const handleChange = (e) => {\n        setFilter(e.target.value);\n    }\n    \n    return (\n        <form onSubmit={e => handleSubmit(e)}>\n            <Input type=\"search\" name=\"searchMovie\" value={filter} onChange={e => handleChange(e)}/>\n            <Button>Search</Button>\n        </form>\n    )\n}\n\nexport default SearchBar","import MoviesList from \"components/MoviesList\";\nimport MoviesListItem from \"components/MoviesListItem\";\nimport SearchBar from \"components/SearchBar\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport {fetchMoviesSearch} from '../api/fetchTheMovies.js'\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState();\n  const [isList, setIsList] = useState(null)\n  const [filter, setFilter] = useState(searchParams.get(\"query\"));\n  const location = useLocation();\n\n  useEffect(() => {\n    if (!!filter) {\n      setSearchParams({query: filter})\n      const fetchMovies = async () => {\n        const response = await fetchMoviesSearch(filter)\n        if (response !== null) {\n          setMovies(response);\n          setIsList(true)\n        } else {\n          setIsList(false)\n        }\n      }\n      fetchMovies()\n    }\n  },[filter, setSearchParams])\n\n  const searchMovies = (filter) => {\n    if (filter) {\n      setFilter(filter)\n    }\n  }\n\n  return (\n    <main>\n      <SearchBar filter={filter} searchMovies={filter => searchMovies(filter)} />\n      {isList === null\n        ? (<></>)\n        : (isList\n          ? (<MoviesList>\n        {movies && movies.map((movie, index) => (\n          <MoviesListItem key={movie.id} linkTo={movie.id} number={index+1} fromLocation={location} movieId={movie.id} movieName={movie.title} />\n        ))}\n      </MoviesList>)\n            : (<div><p>No results</p></div>)\n        )\n      }\n      \n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","then","response","catch","error","fetchMoviesTrendingDay","moviesList","data","results","forEach","movie","push","id","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","release_date","src","year","Date","getFullYear","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage","fetchMovieReviews","reviews","review","author","content","H2","styled","Ul","children","Li","Number","linkTo","movieName","fromLocation","number","to","state","from","fontStyled","Input","map","value","join","Button","searchMovies","useState","setFilter","onSubmit","e","preventDefault","handleSubmit","type","onChange","target","handleChange","useSearchParams","searchParams","setSearchParams","movies","setMovies","isList","setIsList","get","location","useLocation","useEffect","fetchMovies","MoviesList","index","MoviesListItem","movieId"],"sourceRoot":""}