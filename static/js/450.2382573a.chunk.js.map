{"version":3,"file":"static/js/450.2382573a.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/MoviesListItem.jsx","js/fetch-the-movie-db.js","components/SearchBar.jsx","pages/Movies.jsx"],"sourcesContent":["const MoviesList = ({title, children}) => {\n    return (\n        <div>\n            <h2>{title}</h2>\n            <ul>\n                {children}\n            </ul>\n        </div>\n    )\n}\n\nexport default MoviesList","import { Link } from './SharedLayout.styled';\n\nconst MoviesListItem = ({ linkTo, movieName, fromLocation }) => {\n    return (\n        <li><Link to={`${linkTo}`} state={{from:fromLocation}}>{movieName}</Link></li>\n    )\n}\n\nexport default MoviesListItem","import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            if (response.status === 404) {\n                return response\n            }\n            return response\n        })\n        .then(response => {\n            return response\n        })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    const { poster_path, title, vote_average, overview, genres }=response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}","import React, { useState } from \"react\";\n\nconst SearchBar = ({ ...props }) => {\n    const [filter, setFilter] = useState(\"\");\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        props.searchMovies(filter);\n        setFilter(\"\");\n    };\n\n    const handleChange = (e) => {\n        setFilter(e.target.value);\n    }\n    \n    return (\n        <form onSubmit={e => handleSubmit(e)}>\n            <input type=\"search\" name=\"searchMovie\" value={filter} onChange={e => handleChange(e)}/>\n            <button>Search</button>\n        </form>\n    )\n}\n\nexport default SearchBar","import MoviesList from \"components/MoviesList\";\nimport MoviesListItem from \"components/MoviesListItem\";\nimport SearchBar from \"components/SearchBar\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport {fetchMoviesSearch} from '../js/fetch-the-movie-db.js'\n\nconst Movies = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState();\n  const [isList, setIsList] = useState(null)\n  const [filter, setFilter] = useState(searchParams.get(\"query\"));\n  const location = useLocation();\n\n  useEffect(() => {\n    if (filter) {\n      setSearchParams({query: filter})\n      const fetchMovies = async () => {\n        const response = await fetchMoviesSearch(filter)\n        return response\n      }\n      fetchMovies()\n        .then(response => {\n          if (response.length > 0) {\n            setMovies(response)\n            setIsList(true)\n          } else {\n            setIsList(false)\n          }\n        })\n        .catch(error => {\n          console.log(error)\n          setIsList(false)\n        })\n    }\n  },[filter, setSearchParams])\n\n  const searchMovies = (filter) => {\n    if (filter) {\n      setFilter(filter)\n    }\n  }\n\n  return (\n    <main>\n      <SearchBar filter={filter} searchMovies={filter => searchMovies(filter)} />\n      {isList === null\n        ? (<></>)\n        : (isList\n          ? (<MoviesList>\n        {movies && movies.map(movie => (\n          <MoviesListItem key={movie.id} linkTo={movie.id} fromLocation={location} movieId={movie.id} movieName={movie.title} />\n        ))}\n      </MoviesList>)\n            : (<div><p>No results</p></div>)\n        )\n      }\n      \n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["title","children","linkTo","movieName","fromLocation","to","state","from","fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","then","response","status","fetchMoviesTrendingDay","moviesList","data","results","forEach","movie","push","id","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","src","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage","fetchMovieReviews","reviews","review","author","content","props","useState","setFilter","onSubmit","e","preventDefault","searchMovies","handleSubmit","type","value","onChange","target","handleChange","useSearchParams","searchParams","setSearchParams","movies","setMovies","isList","setIsList","get","location","useLocation","useEffect","fetchMovies","length","catch","error","console","log","MoviesList","map","MoviesListItem","movieId"],"sourceRoot":""}