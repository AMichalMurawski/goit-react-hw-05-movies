{"version":3,"file":"static/js/884.6334e2b8.chunk.js","mappings":"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","sources":["js/fetch-the-movie-db.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            if (response.status === 404) {\n                return response\n            }\n            return response\n        })\n        .then(response => {\n            return response\n        })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    const { poster_path, title, vote_average, overview, genres, release_date }=response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n        year: `${new Date(release_date).getFullYear()}`,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}","import { useState } from 'react';\nimport { Suspense, useEffect } from 'react';\nimport { Outlet, useLocation, useParams } from 'react-router-dom';\nimport {fetchMovieDetails} from '../js/fetch-the-movie-db.js'\nimport { Container, Link, Back, Img, Movie, H2, List, Options } from '../components/SharedLayout.styled';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const location = useLocation();\n  const [movie, setMovie] = useState(null)\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const data = await fetchMovieDetails(id)\n      return data\n    }\n    fetchMovies()\n      .then(response => {\n        setMovie(response)\n      })\n      .catch(error => {\n        console.log(\"Error fetch list of trending movies\", error)\n        setMovie(\"\");\n      })\n  },[id])\n\n  return (\n    <main>\n      <Container>\n      <Back to={location.state ? location.state.from : \"/\"}>&#x2190; Go back</Back>\n      {movie !== null ? (\n        (movie ? (\n          <>\n            <Movie>\n              <Img src={movie.src} alt={`${movie.title} movie poster`} />\n              <div>\n                  <H2>{movie.title} ({movie.year})</H2>\n                <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n                <h3>Overview</h3>\n                <p>\n                  {movie.overview}\n                </p>\n                <h3>Genres</h3>\n                <List>\n                  {movie.genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n                </List>\n              </div>\n            </Movie>\n            <Options>\n              <p>Additional information</p>\n              <ul>\n                <li>\n                  <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\">Reviews</Link>\n                </li>\n              </ul>\n            </Options>\n          </>) \n        : (<div>There is no result for this id!</div>))\n      ) \n        : (<>Loading movie...</>)}\n      </Container>\n      <Suspense fallback={<div>Loading subpage...</div>}>\n        <Outlet />\n      </Suspense>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","then","response","status","fetchMoviesTrendingDay","moviesList","data","results","forEach","movie","push","id","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","release_date","src","year","Date","getFullYear","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage","fetchMovieReviews","reviews","review","author","content","useParams","location","useLocation","useState","setMovie","useEffect","fetchMovies","catch","error","console","log","to","state","from","alt","H2","Math","round","map","genre","Suspense","fallback"],"sourceRoot":""}