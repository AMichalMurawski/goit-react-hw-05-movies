{"version":3,"file":"static/js/545.f7ad7e11.chunk.js","mappings":"oRAEaA,EAAKC,EAAAA,GAAAA,GAAH,wGAOFC,EAAKD,EAAAA,GAAAA,GAAH,yK,SCGf,EATwB,SAAC,GAAyB,IAAvBE,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACjC,OACE,UAACF,EAAD,YACE,oCAAYC,MACZ,uBAAIC,MAGT,ECoCD,EAxCoB,WAClB,IAAQC,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBF,GAAa,GADM,UAEIG,EAAAA,EAAAA,IAAkBT,GAFtB,OAEbU,EAFa,OAIjBN,EADe,OAAbM,EACSA,EAEA,IAEbJ,GAAa,GARM,2CAAH,qDAUlBE,GACD,GAAE,CAACR,KAGF,+BACiB,IAAdK,GACC,gDACEF,EAAQQ,OAAS,GACnB,SAAChB,EAAD,UACGQ,EAAQS,KAAI,SAAAC,GAAM,OACjB,SAAC,EAAD,CAEEf,OAAQe,EAAOf,OACfC,QAASc,EAAOd,SAFXc,EAAOb,GAFG,OASrB,uEAIP,C","sources":["components/ReviewsList.styled.js","components/ReviewsListItem.jsx","components/ReviewsList.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  list-style: none;\n`;\n\nexport const Li = styled.li`\n  margin: 0;\n  padding: 0;\n  &:not(:first-of-type) {\n    border-top: 1px dashed black;\n  }\n  & p:first-child {\n    font-weight: 700;\n  }\n`;\n","import { Li } from './ReviewsList.styled';\nimport PropTypes from 'prop-types';\n\nconst ReviewsListItem = ({ author, content }) => {\n  return (\n    <Li>\n      <p>Author: {author}</p>\n      <p>{content}</p>\n    </Li>\n  );\n};\n\nexport default ReviewsListItem;\n\nReviewsListItem.propTypes = {\n  author: PropTypes.string.isRequired,\n  content: PropTypes.string.isRequired,\n};\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchMovieReviews } from '../api/fetchTheMovies.js';\nimport ReviewsListItem from './ReviewsListItem.jsx';\nimport { Ul } from './ReviewsList.styled';\n\nconst ReviewsList = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      const response = await fetchMovieReviews(id);\n      if (response !== null) {\n        setReviews(response);\n      } else {\n        setReviews([]);\n      }\n      setIsLoading(false);\n    };\n    fetchReviews();\n  }, [id]);\n\n  return (\n    <>\n      {isLoading === true ? (\n        <div>Loading reviews...</div>\n      ) : reviews.length > 0 ? (\n        <Ul>\n          {reviews.map(review => (\n            <ReviewsListItem\n              key={review.id}\n              author={review.author}\n              content={review.content}\n            />\n          ))}\n        </Ul>\n      ) : (\n        <div>We don't have any reviews for this movie</div>\n      )}\n    </>\n  );\n};\n\nexport default ReviewsList;\n"],"names":["Ul","styled","Li","author","content","id","useParams","useState","reviews","setReviews","isLoading","setIsLoading","useEffect","fetchReviews","fetchMovieReviews","response","length","map","review"],"sourceRoot":""}