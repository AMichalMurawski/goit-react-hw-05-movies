{"version":3,"file":"static/js/545.536fc52d.chunk.js","mappings":"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","sources":["components/ReviewsList.styled.js","components/ReviewsListItem.jsx","components/ReviewsList.jsx","js/fetch-the-movie-db.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Ul = styled.ul`\n    display:flex; \n    flex-direction: column;\n    gap: 20px;\n    list-style:none;    \n`\n\nexport const Li = styled.li`\n    margin:0;\n    padding:0;\n    &:not(:first-of-type){\n        border-top: 1px dashed black;\n    }\n    & p:first-child{\n        font-weight:700;\n    }\n`","import { Li } from './ReviewsList.styled';\n\nconst ReviewsListItem = ({ author, content }) => {\n    return (\n        <Li>\n            <p>Author: {author}</p>\n            <p>{content}</p>\n        </Li>\n    )\n}\n\nexport default ReviewsListItem","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from \"react\";\nimport { fetchMovieReviews } from '../js/fetch-the-movie-db.js';\nimport ReviewsListItem from './ReviewsListItem.jsx';\nimport { Ul } from './ReviewsList.styled';\n\nconst ReviewsList = () => {\n    const { id } = useParams();\n    const [reviews, setReviews] = useState(undefined);\n\n    useEffect(() => {\n        const fetchReviews = async () => {\n            const data = await fetchMovieReviews(id)\n            return data\n        }\n        fetchReviews()\n            .then(newReviews => {\n                if (newReviews.length > 0) {\n                    setReviews(newReviews)\n                } else {\n                    setReviews(null)\n                }\n            })\n            .catch(error => {\n                console.log(\"Error fetch list of trending movies\", error)\n                setReviews(null)\n            })\n    }, [id])\n\n    return (\n        <>\n            {reviews\n                ? (<Ul>\n                    {reviews.map(review => {\n                        const { id, author, content } = review;\n                        return (<ReviewsListItem key={id} author={author} content={content} />)\n                    })}\n                </Ul>)\n                : reviews === undefined ? (<div>Loading reviews...</div>) : (<div>We don't have any reviews for this movie</div>)\n            }\n        </>\n    )\n}\n\nexport default ReviewsList","import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            if (response.status === 404) {\n                return response\n            }\n            return response\n        })\n        .then(response => {\n            return response\n        })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    const { poster_path, title, vote_average, overview, genres, release_date }=response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n        year: `${new Date(release_date).getFullYear()}`,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}"],"names":["Ul","styled","Li","author","content","id","useParams","useState","undefined","reviews","setReviews","useEffect","fetchReviews","fetchMovieReviews","data","then","newReviews","length","catch","error","console","log","map","review","fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","response","status","fetchMoviesTrendingDay","moviesList","results","forEach","movie","push","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","release_date","src","year","Date","getFullYear","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage"],"sourceRoot":""}