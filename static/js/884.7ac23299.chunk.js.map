{"version":3,"file":"static/js/884.7ac23299.chunk.js","mappings":"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","sources":["api/fetchTheMovies.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst THEMOVIEDB_URL = \"https://api.themoviedb.org/3\"\nconst THEMOVIEDB_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) =>{\n    return axios.get(THEMOVIEDB_URL + searchUrl, {\n        params: {\n            api_key: THEMOVIEDB_KEY,\n            language: \"en-US\",\n            ...parameters\n        }\n    })\n        .then(response => {\n            return response\n        })\n        .catch(error => {\n            return null\n    })\n}\n\nconst fetchMoviesTrendingDay = async () => {\n    const searchUrl = \"/trending/movie/day\";\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n    return moviesList.push({id:movie.id, title:movie.title})\n    });\n    return moviesList\n}\n\nconst fetchMoviesSearch = async (filter) => {\n    const searchUrl = \"/search/movie\";\n    const parameters = {\n        query: filter,\n        page: 1,\n    };\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let moviesList = [];\n    response.data.results.forEach(movie => {\n        const { id, title } = movie;\n        return moviesList.push({id, title})\n    });\n    return moviesList\n}\n\nconst fetchMovieDetails = async (id) => {\n    const searchUrl = `/movie/${id}`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    const { poster_path, title, vote_average, overview, genres, release_date } = response.data\n    const movie = {\n        src: \"https://image.tmdb.org/t/p/w300\" + poster_path,\n        title,\n        vote_average,\n        overview,\n        genres,\n        year: `${new Date(release_date).getFullYear()}`,\n    }\n    return movie\n}\n\nconst fetchMovieCast = async (id) => {\n    const searchUrl = `/movie/${id}/credits`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let actors = [];\n    response.data.cast.forEach(actor => {\n        const { id, profile_path, name, character } = actor;\n        return actors.push({\n            id,\n            srcImage: profile_path !== null ? \"https://image.tmdb.org/t/p/w200\"+profile_path : null,\n            name,\n            character,\n        })\n    });\n    return actors\n}\n\nconst fetchMovieReviews = async (id) => {\n    const searchUrl = `/movie/${id}/reviews`;\n    const parameters = {};\n    const response = await fetchTheMovieDB(searchUrl, parameters);\n    if (response === null) {\n        return null\n    }\n    let reviews = []\n    response.data.results.forEach(review => {\n        const { id, author, content } = review;\n        return reviews.push({ id, author, content });\n    })\n    return reviews\n}\n\nexport {fetchMoviesTrendingDay, fetchMoviesSearch, fetchMovieDetails, fetchMovieCast, fetchMovieReviews}","import { lazy, useState } from 'react';\nimport { useEffect } from 'react';\nimport { Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport {fetchMovieDetails} from '../api/fetchTheMovies.js'\nimport { Container, Link, Back, Img, Movie, H2, List, Options } from '../components/SharedLayout.styled';\n\nconst CastList = lazy(() => import('../components/CastList'));\nconst ReviewsList = lazy(() => import('../components/ReviewsList'));\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const location = useLocation();\n  const [movie, setMovie] = useState(null)\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await fetchMovieDetails(id)\n      if (response !== null) {\n        setMovie(response);\n      } else {\n        setMovie(\"\");\n      }\n    }\n   fetchMovies()\n\n  },[id])\n\n  return (\n    <main>\n      <Container>\n      <Back to={location.state ? location.state.from : \"/\"}>&#x2190; Go back</Back>\n      {movie !== null ? (\n        (movie ? (\n          <>\n            <Movie>\n              <Img src={movie.src} alt={`${movie.title} movie poster`} />\n              <div>\n                  <H2>{movie.title} ({movie.year})</H2>\n                <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n                <h3>Overview</h3>\n                <p>\n                  {movie.overview}\n                </p>\n                <h3>Genres</h3>\n                <List>\n                  {movie.genres.map(genre => <li key={genre.id}>{genre.name}</li>)}\n                </List>\n              </div>\n            </Movie>\n            <Options>\n              <p>Additional information</p>\n              <ul>\n                <li>\n                  <Link to=\"cast\">Cast</Link>\n                </li>\n                <li>\n                  <Link to=\"reviews\">Reviews</Link>\n                </li>\n              </ul>\n            </Options>\n          </>) \n        : (<div>There is no result for this id!</div>))\n      ) \n        : (<>Loading movie...</>)}\n      </Container>\n        <Routes>\n          <Route path=\"cast\" element={<CastList />} />\n          <Route path=\"reviews\" element={<ReviewsList />} />\n        </Routes>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","then","response","catch","error","fetchMoviesTrendingDay","moviesList","data","results","forEach","movie","push","id","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","release_date","src","year","Date","getFullYear","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage","fetchMovieReviews","reviews","review","author","content","CastList","lazy","ReviewsList","useParams","location","useLocation","useState","setMovie","useEffect","fetchMovies","to","state","from","alt","H2","Math","round","map","genre","path","element"],"sourceRoot":""}