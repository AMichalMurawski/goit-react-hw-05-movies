{"version":3,"file":"static/js/884.7ac23299.chunk.js","mappings":"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","sources":["api/fetchTheMovies.js","pages/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'c8f343487431a47156d389fa5ccb000e';\n\nconst fetchTheMovieDB = (searchUrl, parameters) => {\n  return axios\n    .get(API_URL + searchUrl, {\n      params: {\n        api_key: API_KEY,\n        language: 'en-US',\n        ...parameters,\n      },\n    })\n    .then(response => {\n      return response;\n    })\n    .catch(error => {\n      return null;\n    });\n};\n\nconst fetchMoviesTrendingDay = async () => {\n  const searchUrl = '/trending/movie/day';\n  const parameters = {};\n  const response = await fetchTheMovieDB(searchUrl, parameters);\n  if (response === null) {\n    return null;\n  }\n  let moviesList = [];\n  response.data.results.forEach(movie => {\n    return moviesList.push({ id: movie.id, title: movie.title });\n  });\n  return moviesList;\n};\n\nconst fetchMoviesSearch = async filter => {\n  const searchUrl = '/search/movie';\n  const parameters = {\n    query: filter,\n    page: 1,\n  };\n  const response = await fetchTheMovieDB(searchUrl, parameters);\n  if (response === null) {\n    return null;\n  }\n  let moviesList = [];\n  response.data.results.forEach(movie => {\n    const { id, title } = movie;\n    return moviesList.push({ id, title });\n  });\n  return moviesList;\n};\n\nconst fetchMovieDetails = async id => {\n  const searchUrl = `/movie/${id}`;\n  const parameters = {};\n  const response = await fetchTheMovieDB(searchUrl, parameters);\n  if (response === null) {\n    return null;\n  }\n  const { poster_path, title, vote_average, overview, genres, release_date } =\n    response.data;\n  const movie = {\n    src: 'https://image.tmdb.org/t/p/w300' + poster_path,\n    title,\n    vote_average,\n    overview,\n    genres,\n    year: `${new Date(release_date).getFullYear()}`,\n  };\n  return movie;\n};\n\nconst fetchMovieCast = async id => {\n  const searchUrl = `/movie/${id}/credits`;\n  const parameters = {};\n  const response = await fetchTheMovieDB(searchUrl, parameters);\n  if (response === null) {\n    return null;\n  }\n  let actors = [];\n  response.data.cast.forEach(actor => {\n    const { id, profile_path, name, character } = actor;\n    return actors.push({\n      id,\n      srcImage:\n        profile_path !== null\n          ? 'https://image.tmdb.org/t/p/w200' + profile_path\n          : null,\n      name,\n      character,\n    });\n  });\n  return actors;\n};\n\nconst fetchMovieReviews = async id => {\n  const searchUrl = `/movie/${id}/reviews`;\n  const parameters = {};\n  const response = await fetchTheMovieDB(searchUrl, parameters);\n  if (response === null) {\n    return null;\n  }\n  let reviews = [];\n  response.data.results.forEach(review => {\n    const { id, author, content } = review;\n    return reviews.push({ id, author, content });\n  });\n  return reviews;\n};\n\nexport {\n  fetchMoviesTrendingDay,\n  fetchMoviesSearch,\n  fetchMovieDetails,\n  fetchMovieCast,\n  fetchMovieReviews,\n};\n","import { lazy, useState } from 'react';\nimport { useEffect } from 'react';\nimport { Route, Routes, useLocation, useParams } from 'react-router-dom';\nimport { fetchMovieDetails } from '../api/fetchTheMovies.js';\nimport {\n  Container,\n  Link,\n  Back,\n  Img,\n  Movie,\n  H2,\n  List,\n  Options,\n} from '../components/SharedLayout.styled';\n\nconst CastList = lazy(() => import('../components/CastList'));\nconst ReviewsList = lazy(() => import('../components/ReviewsList'));\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const location = useLocation();\n  const [movie, setMovie] = useState(null);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await fetchMovieDetails(id);\n      if (response !== null) {\n        setMovie(response);\n      } else {\n        setMovie('');\n      }\n    };\n    fetchMovies();\n  }, [id]);\n\n  return (\n    <main>\n      <Container>\n        <Back to={location.state ? location.state.from : '/'}>\n          &#x2190; Go back\n        </Back>\n        {movie !== null ? (\n          movie ? (\n            <>\n              <Movie>\n                <Img src={movie.src} alt={`${movie.title} movie poster`} />\n                <div>\n                  <H2>\n                    {movie.title} ({movie.year})\n                  </H2>\n                  <p>User Score: {Math.round(movie.vote_average * 10)}%</p>\n                  <h3>Overview</h3>\n                  <p>{movie.overview}</p>\n                  <h3>Genres</h3>\n                  <List>\n                    {movie.genres.map(genre => (\n                      <li key={genre.id}>{genre.name}</li>\n                    ))}\n                  </List>\n                </div>\n              </Movie>\n              <Options>\n                <p>Additional information</p>\n                <ul>\n                  <li>\n                    <Link to=\"cast\">Cast</Link>\n                  </li>\n                  <li>\n                    <Link to=\"reviews\">Reviews</Link>\n                  </li>\n                </ul>\n              </Options>\n            </>\n          ) : (\n            <div>There is no result for this id!</div>\n          )\n        ) : (\n          <>Loading movie...</>\n        )}\n      </Container>\n      <Routes>\n        <Route path=\"cast\" element={<CastList />} />\n        <Route path=\"reviews\" element={<ReviewsList />} />\n      </Routes>\n    </main>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["fetchTheMovieDB","searchUrl","parameters","axios","params","api_key","language","then","response","catch","error","fetchMoviesTrendingDay","moviesList","data","results","forEach","movie","push","id","title","fetchMoviesSearch","filter","query","page","fetchMovieDetails","poster_path","vote_average","overview","genres","release_date","src","year","Date","getFullYear","fetchMovieCast","actors","cast","actor","profile_path","name","character","srcImage","fetchMovieReviews","reviews","review","author","content","CastList","lazy","ReviewsList","useParams","location","useLocation","useState","setMovie","useEffect","fetchMovies","to","state","from","alt","H2","Math","round","map","genre","path","element"],"sourceRoot":""}